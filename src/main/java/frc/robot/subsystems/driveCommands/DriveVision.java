// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems.driveCommands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.RobotMap;
import frc.robot.common.Convert;
import frc.robot.common.Limelight;
import frc.robot.common.Network;
import frc.robot.subsystems.liftgroupCommands.LiftSetHatch1;
public class DriveVision extends Command {

    private Limelight lime;
    private final double maxSpeed = 0.4;//fastest while tracking
    private final double safeArea = 7.5;//percent area when close
    private final double pow = (3.5/2.0);//curve motor response when close
    private final double coefficient = 0.45;
    private final double minimum = 0.07;
    private final double dead = 2.75;//angle of negligence

    public DriveVision() {
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        lime = Robot.chassis.frontLime;
        Robot.drive.shiftSet(maxSpeed);
        lime.lightOn();
        if(!Robot.arm.getHasItem()){
            //new LiftSetHatch1().start();
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double forward = Robot.oi.driverXbox.getLeftY();
        double turn = 0.6*Robot.oi.driverXbox.getRightX();
        if(lime.getTv()==1){
            double limeTurn = lime.getTx();
            if(!(Math.abs(limeTurn)<=dead)){
                limeTurn /= (RobotMap.FRONTLIME_FOV_WIDTH/2.0);//degrees -> percentage fov
                limeTurn = ((limeTurn<0)? -coefficient:coefficient)*Math.pow(Math.abs(limeTurn), pow);
                if(limeTurn<0){
                    limeTurn = Convert.limit(limeTurn);
                    limeTurn = limeTurn-minimum;
                }
                else{
                    limeTurn = Convert.limit(limeTurn);
                    limeTurn = limeTurn+minimum; 
                }
                turn += limeTurn;
            }
            
            //
            double area = (lime.getTa());
            double limeForward = 0.9*((safeArea-area)/safeArea);
            forward+=limeForward;
        }
        Robot.drive.setForward(forward);
        Robot.drive.setTurn(turn);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.arm.getButton();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drive.shiftDefault();
        lime.lightOff();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
